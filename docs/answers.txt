a) git push
Username for 'https://github.com': mmullis7			
Password for 'https://mmullis7@github.com':
Enumerating objects: 9, done.
Counting objects: 100% (9/9), done.
Delta compression using up to 8 threads
Compressing objects: 100% (5/5), done.
Writing objects: 100% (7/7), 732 bytes | 732.00 KiB/s, done.
Total 7 (delta 2), reused 0 (delta 0)
remote: Resolving deltas: 100% (2/2), completed with 1 local object.
To https://github.com/mmullis7/assignment2.git
   f4975e5..1f0f1ed  master -> master

b)  git rev-list --count master
10 

c) Wed Sep 25 18:13:30 2019 -0400			  
git log .gitignore  

d) As noted in the recitation slides, one possible reason why		
branches are used in a Git repository is to break up development 
tasks among the team members. An example of this would be having 
a new branch for a new feature. Another reason why branches are used 
is that they are extremely useful when developers are working on 
the same project, in parallel. 
										
e) The command git log shows the commit logs, and provides information on the commits. 
For example, for each commit, it lists the commit ID, author, date, and message. The command git status
displays differences and the status of the working tree. This command shows the paths and files that are not tracked, 
or that are staged/unstaged for commits. Git status will also display if the local
branch is up to date.

f) git log -- Vehicle.h 

g) git log --grep="file"

h)	I) In object oriented programming, inheritance is the idea of deriving classes from other classes.
This allows the use of a class that uses an existing class, or parent class, and builds upon
that parent class. The child class would inherit properties from the parent class.
	II) Polymorphism occurs when there is inheritance already occuring. For example, a Shape class, with 
a child class called Circle, could have the following objects because of polymorphism:
	Circle c1 = new Circle();   
	Shape c2 = new Circle();
	Polymorphism is also evident in function overriding, using the keyword "virtual". A child class can override a 
function from the base class.
Therefore, when a function is called, it will depend on the type of the object who called the function.
	III) Encapsulation is the idea of grouping together functions and data that work on a feature, keeping implementation separate
from the interface. In C++, this is done by using classes, and making class member functions and data either public, 
private, or protected. Making the member data private is another technique of encapsulation. 

Git Commands, workflow, and resources.pdf
i) In the "Dictator and Lieutenants” workflow, different "Lieutenants" are in charge of certain parts,
with each Lieutenant having a "Dictator". All the members pull from one repository, where the Dictator is 
the only one allowed to push. 
In the “Integration manager” workflow, each developer pushes to their own repository and pulls from the central repository.
The integration manager then handles conflicts, with the developers pushing and pulling from own repositories.  
The main difference between the two is that the first workflow has a more distributed workflow, with repositories only some 
can push to, and the second workflow each developer pushes to their own individual repositories. 

j) A team of 100 developers would benefit from the “Dictator and Lieutenants” workflow because in "Centralized" there is one 
shared repository. Each developer has to pull and then resolve changes before pushing. In “Dictator and Lieutenants”, things are
more distributed, making this workflow extremely beneficial for large teams. There is one repository that only the 
Dictator can push to, where the Lieutenants have already merged the developer's branches and the Dictator has merged the Lieutenants. 
